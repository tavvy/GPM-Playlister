#!/usr/bin/env node

var program = require('commander');

var app = require('../app');
var login = require('../lib/login');
var pkg = require('../package.json');

/**
 * GENERAL INFO
 */
program
	.version(pkg.version)
	.usage('command [options] <argument...>')
	.description('GPM-Playlister - Generate a Google Music playlist from a BBC Playlister url. Docs: www.github.com/tavvy/GPM-Playlister')
/**
 * GENERATE COMMAND
 */
program
	.command('generate <url|station_name>')
	.option('-s, --station', 'Required when using station name instead of url. see config/stations.json for supported names')
	.option('-g, --guided', 'Guided mode: ask for help when finding matching search results')
	.option('-r, --replace', 'Replace existing GPM playlist if there is a match')
	.action(function(url, options) {
		var opts = mapGenerateOpts(url, options);
		app(opts);
	})
	.description('Generate a playlist')
	.usage('[options] (<url> | <station_name>)')
	.on('--help', function() {
		console.log('  Examples:');
		console.log();
		console.log('    gpm-playlister generate -s radio1');
		console.log('    gpm-playlister generate -s -r -g radio1');
		console.log('    gpm-playlister generate http://www.bbc.co.uk/playlist/zzz11');
		console.log('    gpm-playlister generate -r -g http://www.bbc.co.uk/playlist/zzz11');
		console.log();
	});
/**
 * LOGIN COMMAND
 */
program
	.command('login <google_username> <password>')
	.action(function(username, password){
		login(username, password);
	})
	.description('login to google music')
	.usage('<google_username> <password>')
	.on('--help', function() {
		console.log('  Examples:');
		console.log();
		console.log('    gpm-playlister login example@gmail.com password123');
		console.log();
	});
/**
 * CATCH INVALID COMMANDS
 */
program
	.command("*")
	.action(function(arg) {
		console.log("invalid command: '%s'", arg);
		program.help();
	});

program.on('--help', function(){
	console.log('  Command help:');
	console.log('');
	console.log('    gpm-playlister login -h');
	console.log('    gpm-playlister generate -h');
	console.log('');
});
/**
 * PARSE ARGV
 */
program.parse(process.argv);
/**
 * CATCH NO COMMANDS
 */
if(!process.argv.slice(2).length) {
	program.help();
	process.exit(1);
}
/**
 * MAP GENERATE OPTIONS
 * @param {String} url - either a url or a station name to look up in config/stations.json for url
 * @param {Object} options - station, guided, replace
 * @retuns {Object} opts - mapped and transformed options
 */
function mapGenerateOpts(url, options) {
	var opts = {
		url: options.station ? null : url,
		station: options.station ? url : null,
		guided: options.guided ? true : false,
		replaceExisting: options.replace ? true : false
	}
	return opts;
}
